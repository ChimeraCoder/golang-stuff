// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/cloudfoundry/go_cfmessagebus (interfaces: CFMessageBus)

package test

import (
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of CFMessageBus interface
type MockCFMessageBus struct {
	ctrl     *gomock.Controller
	recorder *_MockCFMessageBusRecorder
}

// Recorder for MockCFMessageBus (not exported)
type _MockCFMessageBusRecorder struct {
	mock *MockCFMessageBus
}

func NewMockCFMessageBus(ctrl *gomock.Controller) *MockCFMessageBus {
	mock := &MockCFMessageBus{ctrl: ctrl}
	mock.recorder = &_MockCFMessageBusRecorder{mock}
	return mock
}

func (_m *MockCFMessageBus) EXPECT() *_MockCFMessageBusRecorder {
	return _m.recorder
}

func (_m *MockCFMessageBus) Configure(_param0 string, _param1 int, _param2 string, _param3 string) {
	_m.ctrl.Call(_m, "Configure", _param0, _param1, _param2, _param3)
}

func (_mr *_MockCFMessageBusRecorder) Configure(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Configure", arg0, arg1, arg2, arg3)
}

func (_m *MockCFMessageBus) Connect() error {
	ret := _m.ctrl.Call(_m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect")
}

func (_m *MockCFMessageBus) Ping() bool {
	ret := _m.ctrl.Call(_m, "Ping")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ping")
}

func (_m *MockCFMessageBus) Publish(_param0 string, _param1 []byte) error {
	ret := _m.ctrl.Call(_m, "Publish", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", arg0, arg1)
}

func (_m *MockCFMessageBus) Request(_param0 string, _param1 []byte, _param2 func([]byte)) error {
	ret := _m.ctrl.Call(_m, "Request", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Request(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Request", arg0, arg1, arg2)
}

func (_m *MockCFMessageBus) RespondToChannel(_param0 string, _param1 func([]byte) []byte) error {
	ret := _m.ctrl.Call(_m, "RespondToChannel", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) RespondToChannel(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RespondToChannel", arg0, arg1)
}

func (_m *MockCFMessageBus) Subscribe(_param0 string, _param1 func([]byte)) error {
	ret := _m.ctrl.Call(_m, "Subscribe", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscribe", arg0, arg1)
}

func (_m *MockCFMessageBus) UnsubscribeAll() error {
	ret := _m.ctrl.Call(_m, "UnsubscribeAll")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) UnsubscribeAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnsubscribeAll")
}
