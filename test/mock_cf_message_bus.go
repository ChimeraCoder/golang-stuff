// Automatically generated by MockGen. DO NOT EDIT!
// Source: ../go_cfmessagebus/go_cfmessagebus.go

package test

import (
	gomock "code.google.com/p/gomock/gomock"
	go_cfmessagebus "github.com/cloudfoundry/go_cfmessagebus"
)

// Mock of CFMessageBus interface
type MockCFMessageBus struct {
	ctrl     *gomock.Controller
	recorder *_MockCFMessageBusRecorder
}

// Recorder for MockCFMessageBus (not exported)
type _MockCFMessageBusRecorder struct {
	mock *MockCFMessageBus
}

func NewMockCFMessageBus(ctrl *gomock.Controller) *MockCFMessageBus {
	mock := &MockCFMessageBus{ctrl: ctrl}
	mock.recorder = &_MockCFMessageBusRecorder{mock}
	return mock
}

func (_m *MockCFMessageBus) EXPECT() *_MockCFMessageBusRecorder {
	return _m.recorder
}

func (_m *MockCFMessageBus) Configure(host string, port int, user string, password string) {
	_m.ctrl.Call(_m, "Configure", host, port, user, password)
}

func (_mr *_MockCFMessageBusRecorder) Configure(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Configure", arg0, arg1, arg2, arg3)
}

func (_m *MockCFMessageBus) Connect() error {
	ret := _m.ctrl.Call(_m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Connect() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Connect")
}

func (_m *MockCFMessageBus) Subscribe(subject string, callback func([]byte)) error {
	ret := _m.ctrl.Call(_m, "Subscribe", subject, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscribe", arg0, arg1)
}

func (_m *MockCFMessageBus) UnsubscribeAll() error {
	ret := _m.ctrl.Call(_m, "UnsubscribeAll")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) UnsubscribeAll() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnsubscribeAll")
}

func (_m *MockCFMessageBus) Publish(subject string, message []byte) error {
	ret := _m.ctrl.Call(_m, "Publish", subject, message)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Publish", arg0, arg1)
}

func (_m *MockCFMessageBus) Request(subject string, message []byte, callback func([]byte)) error {
	ret := _m.ctrl.Call(_m, "Request", subject, message, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Request(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Request", arg0, arg1, arg2)
}

func (_m *MockCFMessageBus) Ping() bool {
	ret := _m.ctrl.Call(_m, "Ping")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) Ping() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ping")
}

func (_m *MockCFMessageBus) RespondToChannel(subject string, callback func([]byte) []byte) error {
	ret := _m.ctrl.Call(_m, "RespondToChannel", subject, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCFMessageBusRecorder) RespondToChannel(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RespondToChannel", arg0, arg1)
}

func (_m *MockCFMessageBus) OnConnect(_param0 func()) {
	_m.ctrl.Call(_m, "OnConnect", _param0)
}

func (_mr *_MockCFMessageBusRecorder) OnConnect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OnConnect", arg0)
}

func (_m *MockCFMessageBus) SetLogger(_param0 go_cfmessagebus.Logger) {
	_m.ctrl.Call(_m, "SetLogger", _param0)
}

func (_mr *_MockCFMessageBusRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLogger", arg0)
}
